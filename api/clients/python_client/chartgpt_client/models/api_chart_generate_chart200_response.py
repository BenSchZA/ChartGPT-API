# coding: utf-8

"""
    ChartGPT API

    The ChartGPT API is a REST API that generates charts and SQL queries based on natural language questions.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr


class ApiChartGenerateChart200Response(BaseModel):
    """
    ApiChartGenerateChart200Response
    """

    description: Optional[StrictStr] = Field(
        None, description="The description of the analysis."
    )
    query: Optional[StrictStr] = Field(None, description="The generated SQL query.")
    code: Optional[StrictStr] = Field(None, description="The generated Python code.")
    chart: Optional[StrictStr] = Field(
        None, description="The generated Plotly chart JSON string."
    )
    output: Optional[StrictStr] = Field(
        None, description="The stdout output of the Python code."
    )
    dataframe: Optional[StrictStr] = Field(
        None, description="The generated Pandas dataframe."
    )
    __properties = ["description", "query", "code", "chart", "output", "dataframe"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiChartGenerateChart200Response:
        """Create an instance of ApiChartGenerateChart200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiChartGenerateChart200Response:
        """Create an instance of ApiChartGenerateChart200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiChartGenerateChart200Response.parse_obj(obj)

        _obj = ApiChartGenerateChart200Response.parse_obj(
            {
                "description": obj.get("description"),
                "query": obj.get("query"),
                "code": obj.get("code"),
                "chart": obj.get("chart"),
                "output": obj.get("output"),
                "dataframe": obj.get("dataframe"),
            }
        )
        return _obj
